-- A DUT entity is used to wrap your design.
--  This example shows how you can do this for the
--  Full-adder.

library ieee;
use ieee.std_logic_1164.all;
entity DUT is
   port(input_vector: in std_logic_vector(9 downto 0);
       	output_vector: out std_logic_vector(0 downto 0));
end entity;

architecture DutWrap of DUT is
component main is
	port (x1: in std_logic_vector(7 downto 0); y1 : out std_logic; r1, clk: in std_logic);
end component main;
begin

   -- input/output vector element ordering is critical,
   -- and must match the ordering in the trace file!
   add_instance: Fsm 
			port map (
					-- order of inputs Cin B A
					
					
					 clk => input_vector(9) ;
				         r1 =>input_vector(8) ;
					 x1(7) => input_vector(7) ;
					 x1(6) => input_vector(6) ;
					 x1(5) => input_vector(5) ;
					 x1(4) => input_vector(4) ;
					 x1(3) => input_vector(3) ;
					 x1(2) => input_vector(2) ;
					 x1(1) => input_vector(1) ;
					 x1(0) => input_vector(0) ;					
					
                                        -- order of outputs S Cout
					y1 => output_vector(0)
				
					);

end DutWrap;

